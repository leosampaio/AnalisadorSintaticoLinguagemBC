/* Generated By:JavaCC: Do not edit this line. ParserExample.java */
import java.io.*;

public class ParserExample implements ParserExampleConstants {
        public static void main(String[] args) throws ParseException, TokenMgrError {
                ParserExample t=null;
                if (args.length == 0) {
                        t = new ParserExample(System.in);
                } else if (args.length == 1) {
                        // lÃª do arquivo cujo nome esta em args[0]
                        try {
                                FileInputStream fis = new FileInputStream(args[0]);
                                t = new ParserExample(fis);
                        } catch (Throwable e) {
                                System.out.println("Erro de Sintaxe: " + e.getMessage());
                                e.printStackTrace();
                        }
                } else {
                        // Formato de entrada invalido
                        System.out.println("Formato de entrada invalido.");
                        return;
                }
                t.bc();
        }

/* GRAMMAR START */

/* Loop inicial P1 */
  final public void bc() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case IF:
      case WHILE:
      case FOR:
      case PRINT:
      case BREAK:
      case CONTINUE:
      case LENGTH:
      case SCALE:
      case IBASE:
      case OBASE:
      case LAST:
      case RETORNO:
      case NUM:
      case STRING:
      case ID:
      case SUB:
      case INC:
      case DEC:
      case NOT:
      case DOT:
      case CHAVEE:
      case PARE:
      case SEMICOLON:
      case LINEBREAK:
        comando();
        break;
      case DEFINE:
        definicao_de_funcao();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case IF:
      case WHILE:
      case FOR:
      case PRINT:
      case BREAK:
      case CONTINUE:
      case LENGTH:
      case SCALE:
      case IBASE:
      case OBASE:
      case LAST:
      case DEFINE:
      case RETORNO:
      case NUM:
      case STRING:
      case ID:
      case SUB:
      case INC:
      case DEC:
      case NOT:
      case DOT:
      case CHAVEE:
      case PARE:
      case SEMICOLON:
      case LINEBREAK:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(QUIT);
  }

/* Comandos P2 */
  final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRT:
    case LENGTH:
    case SCALE:
    case IBASE:
    case OBASE:
    case LAST:
    case NUM:
    case STRING:
    case ID:
    case SUB:
    case INC:
    case DEC:
    case NOT:
    case DOT:
    case PARE:
      E();
      break;
    case CHAVEE:
      comando_composto();
      break;
    case IF:
      E_IF();
      break;
    case WHILE:
      E_WHILE();
      break;
    case FOR:
      E_FOR();
      break;
    case BREAK:
      jj_consume_token(BREAK);
      break;
    case SEMICOLON:
    case LINEBREAK:
      separador();
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      break;
    case PRINT:
      E_PRINT();
      break;
    case RETORNO:
      E_RETORNO();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comando_composto() throws ParseException {
    jj_consume_token(CHAVEE);
    lista_de_comandos();
    jj_consume_token(CHAVED);
  }

  final public void lista_de_comandos() throws ParseException {
    label_2:
    while (true) {
      comando();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case IF:
      case WHILE:
      case FOR:
      case PRINT:
      case BREAK:
      case CONTINUE:
      case LENGTH:
      case SCALE:
      case IBASE:
      case OBASE:
      case LAST:
      case RETORNO:
      case NUM:
      case STRING:
      case ID:
      case SUB:
      case INC:
      case DEC:
      case NOT:
      case DOT:
      case CHAVEE:
      case PARE:
      case SEMICOLON:
      case LINEBREAK:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
  }

  final public void separador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case LINEBREAK:
      jj_consume_token(LINEBREAK);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E_IF() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PARE);
    E();
    jj_consume_token(PARD);
    comando();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      comando();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void E_WHILE() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PARE);
    E();
    jj_consume_token(PARD);
    comando();
  }

  final public void E_FOR() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(PARE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRT:
    case LENGTH:
    case SCALE:
    case IBASE:
    case OBASE:
    case LAST:
    case NUM:
    case STRING:
    case ID:
    case SUB:
    case INC:
    case DEC:
    case NOT:
    case DOT:
    case PARE:
      E();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRT:
    case LENGTH:
    case SCALE:
    case IBASE:
    case OBASE:
    case LAST:
    case NUM:
    case STRING:
    case ID:
    case SUB:
    case INC:
    case DEC:
    case NOT:
    case DOT:
    case PARE:
      E();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRT:
    case LENGTH:
    case SCALE:
    case IBASE:
    case OBASE:
    case LAST:
    case NUM:
    case STRING:
    case ID:
    case SUB:
    case INC:
    case DEC:
    case NOT:
    case DOT:
    case PARE:
      E();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(PARD);
    comando();
  }

  final public void E_PRINT() throws ParseException {
    jj_consume_token(PRINT);
    lista_de_E();
  }

  final public void lista_de_E() throws ParseException {
    E();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      E();
    }
  }

/* Comandos P2 */
  final public void E() throws ParseException {
    E1();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      E1();
    }
  }

  final public void E1() throws ParseException {
    E2();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      E2();
    }
  }

  final public void E2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    E3();
  }

  final public void E3() throws ParseException {
    E4();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case MINOREQ:
      case GREATEREQ:
      case DIF:
      case MINOR:
      case GREATER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case MINOREQ:
        jj_consume_token(MINOREQ);
        break;
      case GREATEREQ:
        jj_consume_token(GREATEREQ);
        break;
      case DIF:
        jj_consume_token(DIF);
        break;
      case MINOR:
        jj_consume_token(MINOR);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E4();
    }
  }

  final public void E4() throws ParseException {
    E5();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
    case ATRIBUICAOSUM:
    case ATRIBUICAOSUB:
    case ATRIBUICAOMUL:
    case ATRIBUICAODIV:
    case ATRIBUICAOMOD:
    case ATRIBUICAOPOW:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        break;
      case ATRIBUICAODIV:
        jj_consume_token(ATRIBUICAODIV);
        break;
      case ATRIBUICAOMOD:
        jj_consume_token(ATRIBUICAOMOD);
        break;
      case ATRIBUICAOMUL:
        jj_consume_token(ATRIBUICAOMUL);
        break;
      case ATRIBUICAOPOW:
        jj_consume_token(ATRIBUICAOPOW);
        break;
      case ATRIBUICAOSUB:
        jj_consume_token(ATRIBUICAOSUB);
        break;
      case ATRIBUICAOSUM:
        jj_consume_token(ATRIBUICAOSUM);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E4();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void E5() throws ParseException {
    E6();
    label_7:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
        jj_consume_token(SUM);
        break;
      case SUB:
        jj_consume_token(SUB);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E6();
    }
  }

  final public void E6() throws ParseException {
    E7();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
        jj_consume_token(DIV);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      case MUL:
        jj_consume_token(MUL);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      E7();
    }
  }

  final public void E7() throws ParseException {
    E8();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POW:
      jj_consume_token(POW);
      E7();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  final public void E8() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
      jj_consume_token(SUB);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    E9();
  }

  final public void E9() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
    case DEC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
        break;
      case DEC:
        jj_consume_token(DEC);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    E9_postfix();
  }

  final public void E9_postfix() throws ParseException {
    E10();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INC:
    case DEC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
        jj_consume_token(INC);
        break;
      case DEC:
        jj_consume_token(DEC);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void E10() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case PARE:
      jj_consume_token(PARE);
      E();
      jj_consume_token(PARD);
      break;
    case SQRT:
      jj_consume_token(SQRT);
      jj_consume_token(PARE);
      E();
      jj_consume_token(PARD);
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
      jj_consume_token(PARE);
      E();
      jj_consume_token(PARD);
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_2(2)) {
        jj_consume_token(SCALE);
        jj_consume_token(PARE);
        E();
        jj_consume_token(PARD);
      } else if (jj_2_3(2)) {
        chamada_de_funcao();
      } else if (jj_2_4(2)) {
        jj_consume_token(ID);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          jj_consume_token(ID);
          jj_consume_token(COLCHE);
          E();
          jj_consume_token(COLCHD);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        case IBASE:
          jj_consume_token(IBASE);
          break;
        case OBASE:
          jj_consume_token(OBASE);
          break;
        case SCALE:
          jj_consume_token(SCALE);
          break;
        case LAST:
          jj_consume_token(LAST);
          break;
        case DOT:
          jj_consume_token(DOT);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void chamada_de_funcao() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(PARE);
    lista_de_E();
    jj_consume_token(PARD);
  }

  final public void definicao_de_funcao() throws ParseException {
    jj_consume_token(DEFINE);
    jj_consume_token(ID);
    jj_consume_token(PARE);
    lista_de_var();
    jj_consume_token(PARD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case LINEBREAK:
      separador();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(CHAVEE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
    case LINEBREAK:
      separador();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
      jj_consume_token(AUTO);
      lista_de_var();
      separador();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    lista_de_comandos();
    jj_consume_token(CHAVED);
  }

  final public void E_RETORNO() throws ParseException {
    if (jj_2_5(2)) {
      jj_consume_token(RETORNO);
      jj_consume_token(PARE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case LENGTH:
      case SCALE:
      case IBASE:
      case OBASE:
      case LAST:
      case NUM:
      case STRING:
      case ID:
      case SUB:
      case INC:
      case DEC:
      case NOT:
      case DOT:
      case PARE:
        E();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(PARD);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETORNO:
        jj_consume_token(RETORNO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQRT:
        case LENGTH:
        case SCALE:
        case IBASE:
        case OBASE:
        case LAST:
        case NUM:
        case STRING:
        case ID:
        case SUB:
        case INC:
        case DEC:
        case NOT:
        case DOT:
        case PARE:
          E();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void lista_de_var() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLCHE:
      jj_consume_token(COLCHE);
      jj_consume_token(COLCHD);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLCHE:
        jj_consume_token(COLCHE);
        jj_consume_token(COLCHD);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    }
  }

  final public void start() throws ParseException {
  Token t;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
      case IF:
      case ELSE:
      case WHILE:
      case FOR:
      case PRINT:
      case BREAK:
      case CONTINUE:
      case QUIT:
      case LENGTH:
      case SCALE:
      case IBASE:
      case OBASE:
      case LAST:
      case DEFINE:
      case AUTO:
      case RETORNO:
      case NUM:
      case STRING:
      case ID:
      case ATRIBUICAO:
      case ATRIBUICAOSUM:
      case ATRIBUICAOSUB:
      case ATRIBUICAOMUL:
      case ATRIBUICAODIV:
      case ATRIBUICAOMOD:
      case ATRIBUICAOPOW:
      case MUL:
      case DIV:
      case MOD:
      case SUB:
      case SUM:
      case INC:
      case DEC:
      case POW:
      case EQUAL:
      case MINOREQ:
      case GREATEREQ:
      case DIF:
      case MINOR:
      case GREATER:
      case OR:
      case AND:
      case NOT:
      case DOT:
      case CHAVED:
      case CHAVEE:
      case COLCHD:
      case COLCHE:
      case PARD:
      case PARE:
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                          System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case NUM:
        t = jj_consume_token(NUM);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                              System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ATRIBUICAO:
        t = jj_consume_token(ATRIBUICAO);
                                  System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ATRIBUICAODIV:
        t = jj_consume_token(ATRIBUICAODIV);
                                     System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ATRIBUICAOMOD:
        t = jj_consume_token(ATRIBUICAOMOD);
                                     System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ATRIBUICAOMUL:
        t = jj_consume_token(ATRIBUICAOMUL);
                                     System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ATRIBUICAOPOW:
        t = jj_consume_token(ATRIBUICAOPOW);
                                     System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ATRIBUICAOSUB:
        t = jj_consume_token(ATRIBUICAOSUB);
                                     System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ATRIBUICAOSUM:
        t = jj_consume_token(ATRIBUICAOSUM);
                                     System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case MUL:
        t = jj_consume_token(MUL);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case DIV:
        t = jj_consume_token(DIV);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case MOD:
        t = jj_consume_token(MOD);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case SUB:
        t = jj_consume_token(SUB);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case SUM:
        t = jj_consume_token(SUM);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case INC:
        t = jj_consume_token(INC);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case DEC:
        t = jj_consume_token(DEC);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case POW:
        t = jj_consume_token(POW);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case EQUAL:
        t = jj_consume_token(EQUAL);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case MINOREQ:
        t = jj_consume_token(MINOREQ);
                               System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case GREATEREQ:
        t = jj_consume_token(GREATEREQ);
                                 System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case DIF:
        t = jj_consume_token(DIF);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case MINOR:
        t = jj_consume_token(MINOR);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case GREATER:
        t = jj_consume_token(GREATER);
                               System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case OR:
        t = jj_consume_token(OR);
                          System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case AND:
        t = jj_consume_token(AND);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case NOT:
        t = jj_consume_token(NOT);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case DOT:
        t = jj_consume_token(DOT);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case CHAVED:
        t = jj_consume_token(CHAVED);
                              System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case CHAVEE:
        t = jj_consume_token(CHAVEE);
                              System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case COLCHD:
        t = jj_consume_token(COLCHD);
                              System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case COLCHE:
        t = jj_consume_token(COLCHE);
                              System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case PARD:
        t = jj_consume_token(PARD);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case PARE:
        t = jj_consume_token(PARE);
                            System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case COMMA:
        t = jj_consume_token(COMMA);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case SQRT:
        t = jj_consume_token(SQRT);
                            System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case IF:
        t = jj_consume_token(IF);
                          System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case FOR:
        t = jj_consume_token(FOR);
                           System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case PRINT:
        t = jj_consume_token(PRINT);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case BREAK:
        t = jj_consume_token(BREAK);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case CONTINUE:
        t = jj_consume_token(CONTINUE);
                                System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case QUIT:
        t = jj_consume_token(QUIT);
                            System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case LENGTH:
        t = jj_consume_token(LENGTH);
                              System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case SCALE:
        t = jj_consume_token(SCALE);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case IBASE:
        t = jj_consume_token(IBASE);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case OBASE:
        t = jj_consume_token(OBASE);
                             System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case LAST:
        t = jj_consume_token(LAST);
                            System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case DEFINE:
        t = jj_consume_token(DEFINE);
                              System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case RETORNO:
        t = jj_consume_token(RETORNO);
                               System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case AUTO:
        t = jj_consume_token(AUTO);
                            System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      case ELSE:
        t = jj_consume_token(ELSE);
                            System.out.println("@(" + t.beginLine + "," + t.beginColumn + ")" + "    " + tokenImage[t.kind] + "\u0009- " + t.image);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
               System.out.println("Final do arquivo");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(RETORNO)) return true;
    if (jj_scan_token(PARE)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(PARE)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(COLCHE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(SCALE)) return true;
    if (jj_scan_token(PARE)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_scan_token(PARE)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(PARE)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(PARE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public ParserExampleTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3dfbec00,0x3dfbec00,0x3cfbec00,0x3cfbec00,0x0,0x1000,0x38f80400,0x38f80400,0x38f80400,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8080400,0x30f00000,0x0,0x0,0x2000000,0x38f80400,0x38f80400,0x4000000,0x0,0x0,0x0,0xfffffc00,0xfffffc00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xd1600d00,0xd1600d00,0xd1600d00,0xd1600d00,0xc0000000,0x0,0x10600d00,0x10600d00,0x10600d00,0x20000000,0x80000,0x100000,0x200000,0x7e000,0x7e000,0x1f,0x1f,0x300,0xe0,0xe0,0x1000,0x100,0xc00,0xc00,0xc00,0xc00,0x10000000,0x400000,0xc0000000,0xc0000000,0x0,0x10600d00,0x10600d00,0x0,0x4000000,0x20000000,0x4000000,0x3fffffff,0x3fffffff,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserExample(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserExample(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserExampleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserExample(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserExampleTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserExample(ParserExampleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserExampleTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
